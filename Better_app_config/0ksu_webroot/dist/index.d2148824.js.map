{"mappings":"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","sources":["<anon>","src/html.js","node_modules/kernelsu/index.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequiree95e\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequiree95e\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7qALL\", function(module, exports) {\n// 导入kernelsu的webui库\n\nvar $5tSLu = parcelRequire(\"5tSLu\");\n// 浏览器打印一个日志\nconsole.log(\"Loader Webui\");\n// 让app在android设备屏幕上弹出一个toast\n(0, $5tSLu.toast)(\"WebUI\\u5DF2\\u52A0\\u8F7D\");\n// 让webui关闭网页全屏模式\n(0, $5tSLu.fullScreen)(false);\n// 获取#app容器\nconst appContainer = document.getElementById(\"app\");\n// 确保appContainer已找到，否则后续操作会导致错误\nif (!appContainer) {\n    console.error(\"\\u672A\\u627E\\u5230#app\\u5BB9\\u5668\");\n    // 退出执行\n    return;\n}\n// 设置默认的shell工作路径\nconst MODDIR = \"/data/adb/modules/better_app_config\";\n// 封装异步函数，用于执行命令并返回输出\n// 接收四个参数, 传入的shell命令, 一个布尔值 verbose 详细模式, 如果不传入工作目录则使用默认值 MODDIR,一个布尔值 noBusybox\n// 如果 noBusybox 为 true，则直接执行传入的 command 否则，使用 busybox 来执行 command\nasync function executeCommand(command, verbose = false, cwd = MODDIR, noBusybox = false) {\n    const cmdToExecute = noBusybox ? command : `${MODDIR}/lib/busybox_run.sh \"${command}\"`;\n    try {\n        const { errno, stdout, stderr } = await (0, $5tSLu.exec)(cmdToExecute, {\n            cwd: cwd\n        });\n        if (errno === 0) return verbose ? `\\u{6807}\\u{51C6}\\u{8F93}\\u{51FA}\\u{6D41}: \n${stdout}\n\\u{9519}\\u{8BEF}\\u{8F93}\\u{51FA}\\u{6D41}: \n${stderr}\n\\u{9000}\\u{51FA}\\u{4EE3}\\u{7801}: ${errno}` : stdout;\n        else return verbose ? `\\u{9519}\\u{8BEF}: \n\\u{6807}\\u{51C6}\\u{8F93}\\u{51FA}\\u{6D41}: \n${stdout}\n\\u{9519}\\u{8BEF}\\u{8F93}\\u{51FA}\\u{6D41}: \n${stderr}\n\\u{9000}\\u{51FA}\\u{4EE3}\\u{7801}: ${errno}` : `\\u{9519}\\u{8BEF}: \n${stderr}`;\n    } catch (error) {\n        return verbose ? `\\u{9519}\\u{8BEF}: \n\\u{6807}\\u{51C6}\\u{8F93}\\u{51FA}\\u{6D41}: \n${error.stdout}\n\\u{9519}\\u{8BEF}\\u{8F93}\\u{51FA}\\u{6D41}: \n${error.stderr}\n\\u{9000}\\u{51FA}\\u{4EE3}\\u{7801}: ${error.errno}` : `\\u{9519}\\u{8BEF}: \n${error.message}`;\n    }\n}\n// 创建标题容器\nconst titleContainer = document.createElement(\"div\");\ntitleContainer.classList.add(\"title-container\");\n// 创建标题元素\nconst title = document.createElement(\"h5\");\ntitle.textContent = \"Module Webui\";\n// 嵌入css样式，允许被点击\ntitle.classList.add(\"allowClick\");\n// 初始化变量\nlet title_clickCount = 0;\ntitle.addEventListener(\"click\", function() {\n    title_clickCount++;\n    ksu.toast(\"\\u88AB\\u70B9\\u4E86\\u4E00\\u6B21\");\n    if (title_clickCount === 3) {\n        title_clickCount = 0;\n        window.location.href = \"https://github.com/linying2024/Better_root_environment/tree/main/Better_app_config/0ksu_webroot\";\n    }\n});\n// 创建版本标题元素\nconst versiontitle = document.createElement(\"h5\");\nversiontitle.textContent = \"version\";\n// 嵌入css样式，允许被点击\nversiontitle.classList.add(\"allowClick\");\n// 初始化变量\nlet versiontitle_clickCount = 0;\nversiontitle.addEventListener(\"click\", function() {\n    versiontitle_clickCount++;\n    switch(versiontitle_clickCount){\n        case 1:\n            ksu.toast(\"?\");\n            break;\n        case 2:\n            ksu.toast(\"\\u4F60\\u5E72\\u561B??\");\n            break;\n        case 3:\n            ksu.toast(\"\\u4F60\\u5230\\u5E95\\u8981\\u505A\\u4EC0\\u4E48???\");\n            break;\n        case 4:\n            ksu.toast(\"\\u4E0D\\u8981\\u518D\\u70B9\\u4E86\\u554A!!!!\");\n            break;\n        case 5:\n            ksu.toast(\"\\u522B\\u70B9\\u4E86,\\u518D\\u70B9\\u8981\\u574F\\u6389\\u4E86.....\");\n            break;\n        case 6:\n            ksu.toast(\"\\u771F\\u7684\\u4E0D\\u80FD\\u518D\\u70B9\\u4E86,\\u771F\\u7684\\u4F1A\\u574F\\u6389\\u7684\\u554A......\");\n            break;\n        case 7:\n            versiontitle_clickCount = 0; // 重置点击计数\n            ksu.toast(\"\\u4E0D\\u542C\\u529D\\u662F\\u5427?\\u4F60\\u5B8C\\u4E86.......\");\n            window.location.href = \"error.html\";\n            break;\n        default:\n            break;\n    }\n});\n// 将版本号和标题添加到容器中，确保标题从右边开始\ntitleContainer.appendChild(versiontitle);\ntitleContainer.appendChild(title);\n// 将标题容器追加到#app容器中\nappContainer.appendChild(titleContainer);\n// 立即执行异步函数来获取模块版本号并设置标题\n(async function getVersions() {\n    try {\n        let version = await executeCommand(`sed -n \\'s/^version=//p\\' ${MODDIR}/module.prop`);\n        let versionCode = await executeCommand(`sed -n \\'s/^versionCode=//p\\' ${MODDIR}/module.prop`);\n        // 设置版本标题元素的文本内容\n        versiontitle.textContent = `\\u{7248}\\u{672C}: ${version} (${versionCode})`;\n    } catch (error) {\n        console.error(\"\\u6267\\u884C\\u547D\\u4EE4\\u65F6\\u53D1\\u751F\\u9519\\u8BEF:\", error);\n    }\n})();\n// 定义一个异步函数，用于将shell执行结果输出到日志区\n// 接收传入的命令,如果不传入工作目录则使用默认值 MODDIR\nasync function PrintExecuteCommandLogToUi(command, verbose = true, cwd = MODDIR, noBusybox = false) {\n    // 先给个提醒，防止多次点击\n    logEntry.textContent = \"\\u6267\\u884C\\u4E2D\";\n    // 设置延迟,让ui有机会更新出来\n    setTimeout(async ()=>{\n        // 尝试执行\n        try {\n            // 调用封装好的异步函数执行命令\n            const result = await executeCommand(command, verbose, cwd, noBusybox);\n            // 将命令执行的结果直接设置到 <pre> 元素中\n            logEntry.textContent = result;\n            // 滚动日志区域到最新内容（如果日志区域有滚动条的话）\n            logBody.scrollTop = logBody.scrollHeight;\n        } catch (error) {\n            console.error(\"\\u6267\\u884C\\u547D\\u4EE4\\u65F6\\u53D1\\u751F\\u9519\\u8BEF:\", error);\n            // 将错误信息设置到 <pre> 元素中\n            logEntry.textContent = \"\\u6267\\u884C\\u547D\\u4EE4\\u65F6\\u53D1\\u751F\\u9519\\u8BEF: \" + error.message;\n        }\n    }, 100);\n}\n// 创建命令行控制卡片\nconst serverStatusCard = document.createElement(\"div\");\nserverStatusCard.classList.add(\"card\");\nconst serverStatusHeader = document.createElement(\"div\");\nserverStatusHeader.classList.add(\"card-header\");\nserverStatusHeader.textContent = \"\\u63A7\\u5236\\u533A\";\nconst serverStatusBody = document.createElement(\"div\");\nserverStatusBody.classList.add(\"card-body\");\n// 创建按钮容器并应用样式\nconst buttonsContainer = document.createElement(\"div\");\nbuttonsContainer.classList.add(\"button-container\");\n// 创建按钮并添加到buttonsContainer\nconst buttons = [\n    \"\\u914D\\u7F6E Tricky-Store \\u6A21\\u5757\",\n    \"\\u66F4\\u65B0 boot hash(\\u5FC5\\u987B\\u4FDD\\u8BC1\\u6A21\\u5757\\u81EA\\u5E26\\u7684\\u5BC6\\u94A5\\u8BA4\\u8BC1APP\\u5DF2\\u5B89\\u88C5)\",\n    \"\\u4E00\\u952E\\u91CD\\u65B0\\u914D\\u7F6E\",\n    \"\\u5B89\\u88C5\\u6A21\\u5757\\u81EA\\u5E26\\u7684app\"\n].map((text)=>{\n    const button = document.createElement(\"button\");\n    button.textContent = text;\n    buttonsContainer.appendChild(button);\n    return button;\n});\n// 将按钮容器添加到serverStatusBody\nserverStatusBody.appendChild(buttonsContainer);\n// 创建执行按钮\nconst hmaButton = document.createElement(\"button\");\nhmaButton.textContent = \"\\u6253\\u5F00\\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868\\u83DC\\u5355\";\n// 添加提示\nconst buttonDescription = document.createElement(\"p\");\nbuttonDescription.classList.add(\"input-container\");\nbuttonDescription.textContent = \"\\u63D0\\u793A:\\u547D\\u4EE4\\u8F83\\u591A\\u65F6\\u53EF\\u80FD\\u4F1A\\u5361\\u4F4F\\u6216\\u8005\\u65E5\\u5FD7\\u672A\\u8F93\\u51FA,\\u8FD9\\u662F\\u6B63\\u5E38\\u73B0\\u8C61\";\n// 添加输入框和执行按钮的容器\nconst inputContainer = document.createElement(\"div\");\ninputContainer.classList.add(\"input-container\");\nconst inputDescription = document.createElement(\"p\");\ninputDescription.textContent = \"\\u81EA\\u5B9A\\u4E49shell\\u6267\\u884C\";\n// 创建输入框\nconst inputBox = document.createElement(\"input\");\ninputBox.type = \"text\";\ninputBox.placeholder = \"\\u8F93\\u5165\\u81EA\\u5B9A\\u4E49sh\\u547D\\u4EE4\";\n// 创建执行按钮\nconst CustomExecuteButton = document.createElement(\"button\");\nCustomExecuteButton.textContent = \"\\u6267\\u884C\";\n// 将所有元素添加到inputContainer中\ninputContainer.appendChild(inputBox);\ninputContainer.appendChild(CustomExecuteButton);\n// 添加输入框和按钮的容器\nconst inputContainer2 = document.createElement(\"div\");\ninputContainer2.classList.add(\"input-container\");\nconst inputDescription2 = document.createElement(\"p\");\ninputDescription2.textContent = \"\\u2190\\u6253\\u5F00\\u7F51\\u5740\";\n// 创建输入框\nconst inputBox2 = document.createElement(\"input\");\ninputBox2.type = \"text\";\ninputBox2.placeholder = \"\\u8F93\\u5165\\u60A8\\u60F3\\u8981\\u6253\\u5F00\\u7684\\u7F51\\u5740\";\n// 创建按钮\nconst CustomExecuteButton2 = document.createElement(\"button\");\nCustomExecuteButton2.textContent = \"\\u6253\\u5F00\";\n// 将所有元素添加到inputContainer2中\ninputContainer2.appendChild(inputBox2);\ninputContainer2.appendChild(CustomExecuteButton2);\n// 将所有元素添加到卡片中\nserverStatusBody.appendChild(hmaButton);\nserverStatusBody.appendChild(buttonDescription); // 添加描述\nserverStatusBody.appendChild(document.createElement(\"br\")); // 添加换行\nserverStatusBody.appendChild(inputDescription); // 添加描述\nserverStatusBody.appendChild(inputContainer); // 添加输入框和执行按钮的容器\nserverStatusBody.appendChild(document.createElement(\"br\")); // 添加换行\nserverStatusBody.appendChild(inputContainer2);\nserverStatusBody.appendChild(inputDescription2); // 添加换行\nserverStatusCard.appendChild(serverStatusHeader);\nserverStatusCard.appendChild(serverStatusBody);\n// 创建日志信息卡片（类似地）\nconst logCard = document.createElement(\"div\");\nlogCard.classList.add(\"card\");\nconst logHeader = document.createElement(\"div\");\nlogHeader.classList.add(\"card-header\");\nlogHeader.textContent = \"\\u65E5\\u5FD7\\u4FE1\\u606F\";\nconst logBody = document.createElement(\"div\");\n// 创建日志信息的列表项\nconst logEntry = document.createElement(\"pre\");\nlogEntry.classList.add(\"log-body\");\nlogEntry.textContent = \"\\u8FD8\\u6CA1\\u6709\\u547D\\u4EE4\\u6267\\u884C\\u5462\";\n// 创建一个ul元素并将列表项添加到其中\nconst logList = document.createElement(\"ul\");\nlogList.appendChild(logEntry);\n// 将所有元素添加到日志卡片中\nlogBody.appendChild(logList);\nlogCard.appendChild(logHeader);\nlogCard.appendChild(logBody);\n// 为按钮添加点击事件监听器\nbuttons.forEach((button, index)=>{\n    button.addEventListener(\"click\", ()=>{\n        // 定义要执行的命令和目录(尽量使用完整路径以减少错误)\n        const commands = [\n            `sh ${MODDIR}/Tricky_Store/get_config.sh`,\n            `rm -f gethash.done;sh ${MODDIR}/getboothash.sh`,\n            `sh ${MODDIR}/action.sh`,\n            `sh ${MODDIR}/apks/install.sh`\n        ];\n        // 调用封装好的异步函数执行命令\n        PrintExecuteCommandLogToUi(commands[index]);\n    });\n});\nCustomExecuteButton.addEventListener(\"click\", async ()=>{\n    // 调用封装好的异步函数执行命令\n    PrintExecuteCommandLogToUi(inputBox.value);\n});\nCustomExecuteButton2.addEventListener(\"click\", async ()=>{\n    // 让webui网页调整全屏模式\n    (0, $5tSLu.fullScreen)(false);\n    ksu.toast(\"\\u5DF2\\u6253\\u5F00\\u7F51\\u9875\");\n    window.location.href = inputBox2.value;\n});\n// 为菜单项添加点击事件监听器\nhmaButton.addEventListener(\"click\", ()=>{\n    // 创建一个新的div，用于包含新的菜单项\n    const HMANewMenuContainer = document.createElement(\"div\");\n    HMANewMenuContainer.classList.add(\"hma-body\"); // 添加class\n    HMANewMenuContainer.classList.add(\"card\");\n    // 创建关闭按钮并添加点击事件监听器\n    const HMACloseButton = document.createElement(\"button\");\n    HMACloseButton.textContent = \"x\";\n    HMACloseButton.classList.add(\"close-button\");\n    HMACloseButton.addEventListener(\"click\", ()=>{\n        // 当关闭按钮被点击时，删除整个菜单\n        document.body.removeChild(HMANewMenuContainer);\n    });\n    // 创建菜单头部并添加关闭按钮\n    const HMAMenuHeader = document.createElement(\"div\");\n    HMAMenuHeader.classList.add(\"card-header\");\n    HMAMenuHeader.textContent = \"\\u8BBE\\u7F6E\\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868\";\n    HMAMenuHeader.appendChild(HMACloseButton); // 将关闭按钮添加到头部\n    const HMAMenuBody = document.createElement(\"div\");\n    HMAMenuBody.classList.add(\"card-body\");\n    // 创建按钮容器并应用样式\n    const HMAButtonsContainer = document.createElement(\"div\");\n    HMAButtonsContainer.classList.add(\"button-container\");\n    // 创建按钮并添加到HMAButtonsContainer\n    const HMAButtons = [\n        \"\\u914D\\u7F6E \\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868 APP\",\n        \"\\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868\\u5207\\u6362\\u9ED1\\u540D\\u5355\\u6A21\\u5F0F\",\n        \"\\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868\\u5207\\u6362\\u767D\\u540D\\u5355\\u6A21\\u5F0F\",\n        \"\\u5173\\u95ED\\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868\\u81EA\\u52A8\\u91CD\\u8F7D\",\n        \"\\u5F00\\u542F\\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868\\u81EA\\u52A8\\u91CD\\u8F7D\"\n    ].map((text)=>{\n        const button = document.createElement(\"button\");\n        button.textContent = text;\n        HMAButtonsContainer.appendChild(button);\n        return button;\n    });\n    // 为按钮添加点击事件监听器\n    HMAButtons.forEach((button, index)=>{\n        button.addEventListener(\"click\", ()=>{\n            // 当按钮被点击时，删除整个菜单\n            document.body.removeChild(HMANewMenuContainer);\n            const commands = [\n                `sh ${MODDIR}/Hide_My_Applist/get_config.sh`,\n                `rm -f ${MODDIR}/Hide_My_Applist/whitelist.mode;sh ${MODDIR}/Hide_My_Applist/get_config.sh`,\n                `touch ${MODDIR}/Hide_My_Applist/whitelist.mode;sh ${MODDIR}/Hide_My_Applist/get_config.sh`,\n                `rm -f ${MODDIR}/Hide_My_Applist/reload`,\n                `touch ${MODDIR}/Hide_My_Applist/reload`\n            ];\n            // 调用封装好的异步函数执行命令\n            PrintExecuteCommandLogToUi(commands[index]);\n        });\n    });\n    // 获取信息\n    const HMAPackageName = `sed -n 's/^HMAPackageName=//p' \"${MODDIR}/webroot/webUiConfig.prop\"`;\n    const ProfileName = `sed -n 's/^ProfileName=//p' \"${MODDIR}/webroot/webUiConfig.prop\"`;\n    const GetExcludeList = `sed -n 's/^GetExcludeList=//p' \"${MODDIR}/webroot/webUiConfig.prop\"`;\n    const HMAInputDescription = document.createElement(\"p\");\n    HMAInputDescription.classList.add(\"description-up\");\n    HMAInputDescription.textContent = \"\\u81EA\\u5B9A\\u4E49\\u5BFC\\u5165\\u914D\\u7F6E\";\n    // 定义一个函数来创建输入框和执行按钮容器\n    function createInputContainer(descriptionText, inputDescriptionText, configKey) {\n        const container = document.createElement(\"div\");\n        container.classList.add(\"input-container\");\n        const description = document.createElement(\"p\");\n        description.classList.add(\"description-up\");\n        description.textContent = descriptionText;\n        const inputBox = document.createElement(\"input\");\n        inputBox.id = `${configKey}Input`;\n        inputBox.type = \"text\";\n        inputBox.placeholder = `\\u{5728}\\u{8FD9}\\u{91CC}\\u{8F93}\\u{5165}\\u{81EA}\\u{5B9A}\\u{4E49}${inputDescriptionText}`;\n        const executeButton = document.createElement(\"button\");\n        executeButton.textContent = \"\\u4FDD\\u5B58\";\n        executeButton.addEventListener(\"click\", async ()=>{\n            const command = `sed -i 's/^${configKey}=.*/${configKey}=${inputBox.value}/' \"${MODDIR}/webroot/webUiConfig.prop\" && echo \"\\u{5DF2}\\u{5199}\\u{5165}\"`;\n            PrintExecuteCommandLogToUi(command);\n        });\n        container.appendChild(inputBox);\n        container.appendChild(executeButton);\n        container.appendChild(description);\n        return container;\n    }\n    // 添加输入框和执行按钮的容器\n    const HMAInputContainer1 = createInputContainer(\"\\u2191\\u8F93\\u5165\\u6B63\\u786E\\u7684app\\u5305\\u540D,\\u9ED8\\u8BA4\\u4E3A fuck.app.check\", \"app\\u5305\\u540D\", \"HMAPackageName\");\n    const HMAInputContainer2 = createInputContainer(\"\\u2191\\u8F93\\u5165\\u6B63\\u786E\\u7684\\u9690\\u85CF\\u5E94\\u7528\\u5217\\u8868\\u6A21\\u677F\\u540D\\u5B57,\\u9ED8\\u8BA4\\u4E3A \\u4E0D\\u53EF\\u89C1\\u540D\\u5355\", \"\\u6A21\\u677F\\u914D\\u7F6E\\u540D\", \"ProfileName\");\n    const HMAInputContainer3 = createInputContainer(\"\\u2191\\u8F93\\u5165\\u6B63\\u786E\\u7684\\u7C7B\\u578B(\\u8F93\\u5165 true \\u5F00\\u542F,\\u8F93\\u5165 false \\u5173\\u95ED),\\u9ED8\\u8BA4\\u4E3A true\", \"\\u662F\\u5426\\u5F00\\u542F\\u6392\\u9664\\u540D\\u5355\\u751F\\u6210\", \"GetExcludeList\");\n    // 定义一个异步函数\n    setTimeout(async ()=>{\n        try {\n            // 获取内容\n            const HMAPackageName1 = await executeCommand(HMAPackageName);\n            // 设置元素的文本内容\n            document.getElementById(\"HMAPackageNameInput\").value = `${HMAPackageName1}`;\n            // 获取内容\n            const ProfileName1 = await executeCommand(ProfileName);\n            // 设置元素的文本内容\n            document.getElementById(\"ProfileNameInput\").value = `${ProfileName1}`;\n            // 获取内容\n            const GetExcludeList1 = await executeCommand(GetExcludeList);\n            // 设置元素的文本内容\n            document.getElementById(\"GetExcludeListInput\").value = `${GetExcludeList1}`;\n        } catch (error) {\n            console.error(\"\\u6267\\u884C\\u547D\\u4EE4\\u65F6\\u53D1\\u751F\\u9519\\u8BEF:\", error);\n        }\n    }, 100); // 延迟毫秒\n    // 创建导入按钮\n    const inputConfig = document.createElement(\"button\");\n    inputConfig.textContent = \"\\u4E00\\u952E\\u5BFC\\u5165\\u5E76\\u751F\\u6210\\u914D\\u7F6E\";\n    inputConfig.addEventListener(\"click\", ()=>{\n        // 当按钮被点击时，删除整个菜单\n        document.body.removeChild(HMANewMenuContainer);\n        // 定义要执行的命令和目录\n        const command = `\"${MODDIR}/Hide_My_Applist/0unpack_config.sh\" \"/data/user/0/$(${HMAPackageName})/files/config.json\" \"$(${ProfileName})\" \"$(${GetExcludeList})\";`;\n        // 调用封装好的异步函数执行命令\n        PrintExecuteCommandLogToUi(command);\n    });\n    HMANewMenuContainer.appendChild(HMAMenuHeader); // 添加头部到菜单容器\n    HMANewMenuContainer.appendChild(HMAButtonsContainer); // 添加按钮容器到菜单容器\n    HMANewMenuContainer.appendChild(HMAInputDescription);\n    HMANewMenuContainer.appendChild(HMAInputContainer1); // 添加HMAInputContainer1到菜单容器\n    HMANewMenuContainer.appendChild(HMAInputContainer2); // 添加HMAInputContainer2到菜单容器\n    HMANewMenuContainer.appendChild(HMAInputContainer3); // 添加HMAInputContainer3到菜单容器\n    HMANewMenuContainer.appendChild(inputConfig);\n    // 将菜单项添加到页面中\n    document.body.insertBefore(HMANewMenuContainer, appContainer);\n});\n// 最后，将卡片和标题添加到#app容器中\nappContainer.appendChild(serverStatusCard);\nappContainer.appendChild(logCard);\n// 创建一个新的 div 元素用于制作者提醒\nconst footer = document.createElement(\"div\");\nfooter.id = \"footer\";\n// 设置制作者提醒的内容\nfooter.textContent = \"Designed by linying\";\n// 将制作者提醒添加到页面的 body 中\ndocument.body.appendChild(footer);\n\n});\nparcelRegister(\"5tSLu\", function(module, exports) {\n\n$parcel$export(module.exports, \"exec\", () => $3fda245dd9a38f2c$export$78e3044358792147);\n$parcel$export(module.exports, \"fullScreen\", () => $3fda245dd9a38f2c$export$708e76f13b8a286c);\n$parcel$export(module.exports, \"toast\", () => $3fda245dd9a38f2c$export$b410431fab84fa58);\nlet $3fda245dd9a38f2c$var$callbackCounter = 0;\nfunction $3fda245dd9a38f2c$var$getUniqueCallbackName(prefix) {\n    return `${prefix}_callback_${Date.now()}_${$3fda245dd9a38f2c$var$callbackCounter++}`;\n}\nfunction $3fda245dd9a38f2c$export$78e3044358792147(command, options) {\n    if (typeof options === \"undefined\") options = {};\n    return new Promise((resolve, reject)=>{\n        // Generate a unique callback function name\n        const callbackFuncName = $3fda245dd9a38f2c$var$getUniqueCallbackName(\"exec\");\n        // Define the success callback function\n        window[callbackFuncName] = (errno, stdout, stderr)=>{\n            resolve({\n                errno: errno,\n                stdout: stdout,\n                stderr: stderr\n            });\n            cleanup(callbackFuncName);\n        };\n        function cleanup(successName) {\n            delete window[successName];\n        }\n        try {\n            ksu.exec(command, JSON.stringify(options), callbackFuncName);\n        } catch (error) {\n            reject(error);\n            cleanup(callbackFuncName);\n        }\n    });\n}\nfunction $3fda245dd9a38f2c$var$Stdio() {\n    this.listeners = {};\n}\n$3fda245dd9a38f2c$var$Stdio.prototype.on = function(event, listener) {\n    if (!this.listeners[event]) this.listeners[event] = [];\n    this.listeners[event].push(listener);\n};\n$3fda245dd9a38f2c$var$Stdio.prototype.emit = function(event, ...args) {\n    if (this.listeners[event]) this.listeners[event].forEach((listener)=>listener(...args));\n};\nfunction $3fda245dd9a38f2c$var$ChildProcess() {\n    this.listeners = {};\n    this.stdin = new $3fda245dd9a38f2c$var$Stdio();\n    this.stdout = new $3fda245dd9a38f2c$var$Stdio();\n    this.stderr = new $3fda245dd9a38f2c$var$Stdio();\n}\n$3fda245dd9a38f2c$var$ChildProcess.prototype.on = function(event, listener) {\n    if (!this.listeners[event]) this.listeners[event] = [];\n    this.listeners[event].push(listener);\n};\n$3fda245dd9a38f2c$var$ChildProcess.prototype.emit = function(event, ...args) {\n    if (this.listeners[event]) this.listeners[event].forEach((listener)=>listener(...args));\n};\nfunction $3fda245dd9a38f2c$export$1713f5ac2bf0caf5(command, args, options) {\n    if (typeof args === \"undefined\") args = [];\n    else if (typeof args === \"object\") // allow for (command, options) signature\n    options = args;\n    if (typeof options === \"undefined\") options = {};\n    const child = new $3fda245dd9a38f2c$var$ChildProcess();\n    const childCallbackName = $3fda245dd9a38f2c$var$getUniqueCallbackName(\"spawn\");\n    window[childCallbackName] = child;\n    function cleanup(name) {\n        delete window[name];\n    }\n    child.on(\"exit\", (code)=>{\n        cleanup(childCallbackName);\n    });\n    try {\n        ksu.spawn(command, JSON.stringify(args), JSON.stringify(options), childCallbackName);\n    } catch (error) {\n        child.emit(\"error\", error);\n        cleanup(childCallbackName);\n    }\n    return child;\n}\nfunction $3fda245dd9a38f2c$export$708e76f13b8a286c(isFullScreen) {\n    ksu.fullScreen(isFullScreen);\n}\nfunction $3fda245dd9a38f2c$export$b410431fab84fa58(message) {\n    ksu.toast(message);\n}\n\n});\n\n\n\nparcelRequire(\"7qALL\");\n\n//# sourceMappingURL=index.d2148824.js.map\n","// 导入kernelsu的webui库\r\nimport { fullScreen, exec, toast } from 'kernelsu';\r\n\r\n// 浏览器打印一个日志\r\nconsole.log(\"Loader Webui\");\r\n// 让app在android设备屏幕上弹出一个toast\r\ntoast('WebUI已加载');\r\n// 让webui关闭网页全屏模式\r\nfullScreen(false);\r\n\r\n// 获取#app容器\r\nconst appContainer = document.getElementById('app');\r\n// 确保appContainer已找到，否则后续操作会导致错误\r\nif (!appContainer) {\r\n  console.error('未找到#app容器');\r\n  // 退出执行\r\n  return;\r\n}\r\n\r\n// 设置默认的shell工作路径\r\nconst MODDIR = \"/data/adb/modules/better_app_config\";\r\n\r\n// 封装异步函数，用于执行命令并返回输出\r\n// 接收四个参数, 传入的shell命令, 一个布尔值 verbose 详细模式, 如果不传入工作目录则使用默认值 MODDIR,一个布尔值 noBusybox\r\n// 如果 noBusybox 为 true，则直接执行传入的 command 否则，使用 busybox 来执行 command\r\nasync function executeCommand(command, verbose = false, cwd = MODDIR, noBusybox = false) {\r\n  const cmdToExecute = noBusybox ? command : `${MODDIR}/lib/busybox_run.sh \"${command}\"`;\r\n  try {\r\n    const { errno, stdout, stderr } = await exec(cmdToExecute, { cwd });\r\n    if (errno === 0) {\r\n      return verbose ? `标准输出流: \\n${stdout}\\n错误输出流: \\n${stderr}\\n退出代码: ${errno}` : stdout;\r\n    } else {\r\n      return verbose ? `错误: \\n标准输出流: \\n${stdout}\\n错误输出流: \\n${stderr}\\n退出代码: ${errno}` : `错误: \\n${stderr}`;\r\n    }\r\n  } catch (error) {\r\n    return verbose ? `错误: \\n标准输出流: \\n${error.stdout}\\n错误输出流: \\n${error.stderr}\\n退出代码: ${error.errno}` : `错误: \\n${error.message}`;\r\n  }\r\n}\r\n\r\n// 创建标题容器\r\nconst titleContainer = document.createElement('div');\r\ntitleContainer.classList.add('title-container');\r\n// 创建标题元素\r\nconst title = document.createElement('h5');\r\ntitle.textContent = 'Module Webui';\r\n// 嵌入css样式，允许被点击\r\ntitle.classList.add('allowClick');\r\n// 初始化变量\r\nlet title_clickCount = 0;\r\ntitle.addEventListener('click', function() {\r\n  title_clickCount++;\r\n  ksu.toast('被点了一次');\r\n  if (title_clickCount === 3) {\r\n    title_clickCount = 0;\r\n    window.location.href = \"https://github.com/linying2024/Better_root_environment/tree/main/Better_app_config/0ksu_webroot\";\r\n  };\r\n});\r\n// 创建版本标题元素\r\nconst versiontitle = document.createElement('h5');\r\nversiontitle.textContent = 'version';\r\n// 嵌入css样式，允许被点击\r\nversiontitle.classList.add('allowClick');\r\n// 初始化变量\r\nlet versiontitle_clickCount = 0;\r\nversiontitle.addEventListener('click', function() {\r\n  versiontitle_clickCount++;\r\n  switch (versiontitle_clickCount) {\r\n    case 1:\r\n      ksu.toast('?');\r\n      break;\r\n    case 2:\r\n      ksu.toast('你干嘛??');\r\n      break;\r\n    case 3:\r\n      ksu.toast('你到底要做什么???');\r\n      break;\r\n    case 4:\r\n      ksu.toast('不要再点了啊!!!!');\r\n      break;\r\n    case 5:\r\n      ksu.toast('别点了,再点要坏掉了.....');\r\n      break;\r\n    case 6:\r\n      ksu.toast('真的不能再点了,真的会坏掉的啊......');\r\n      break;\r\n    case 7:\r\n      versiontitle_clickCount = 0; // 重置点击计数\r\n      ksu.toast('不听劝是吧?你完了.......');\r\n      window.location.href = \"error.html\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n// 将版本号和标题添加到容器中，确保标题从右边开始\r\ntitleContainer.appendChild(versiontitle);\r\ntitleContainer.appendChild(title);\r\n// 将标题容器追加到#app容器中\r\nappContainer.appendChild(titleContainer);\r\n\r\n// 立即执行异步函数来获取模块版本号并设置标题\r\n(async function getVersions() {\r\n  try {\r\n    let version = await executeCommand(`sed -n \\'s/^version=//p\\' ${MODDIR}/module.prop`);\r\n    let versionCode = await executeCommand(`sed -n \\'s/^versionCode=//p\\' ${MODDIR}/module.prop`);\r\n    // 设置版本标题元素的文本内容\r\n    versiontitle.textContent = `版本: ${version} (${versionCode})`;\r\n  } catch (error) {\r\n    console.error('执行命令时发生错误:', error);\r\n  }\r\n})();\r\n\r\n// 定义一个异步函数，用于将shell执行结果输出到日志区\r\n// 接收传入的命令,如果不传入工作目录则使用默认值 MODDIR\r\nasync function PrintExecuteCommandLogToUi(command, verbose = true ,cwd = MODDIR, noBusybox = false) {\r\n  // 先给个提醒，防止多次点击\r\n  logEntry.textContent = '执行中';\r\n  // 设置延迟,让ui有机会更新出来\r\n  setTimeout(async () => {\r\n    // 尝试执行\r\n    try {\r\n      // 调用封装好的异步函数执行命令\r\n      const result = await executeCommand(command, verbose, cwd, noBusybox);\r\n      // 将命令执行的结果直接设置到 <pre> 元素中\r\n      logEntry.textContent = result;\r\n      // 滚动日志区域到最新内容（如果日志区域有滚动条的话）\r\n      logBody.scrollTop = logBody.scrollHeight;\r\n    } catch (error) {\r\n      console.error('执行命令时发生错误:', error);\r\n      // 将错误信息设置到 <pre> 元素中\r\n      logEntry.textContent = '执行命令时发生错误: ' + error.message;\r\n    }\r\n  }, 100);\r\n}\r\n\r\n// 创建命令行控制卡片\r\nconst serverStatusCard = document.createElement('div');\r\nserverStatusCard.classList.add('card');\r\nconst serverStatusHeader = document.createElement('div');\r\nserverStatusHeader.classList.add('card-header');\r\nserverStatusHeader.textContent = '控制区';\r\nconst serverStatusBody = document.createElement('div');\r\nserverStatusBody.classList.add('card-body');\r\n\r\n// 创建按钮容器并应用样式\r\nconst buttonsContainer = document.createElement('div');\r\nbuttonsContainer.classList.add('button-container');\r\n// 创建按钮并添加到buttonsContainer\r\nconst buttons = ['配置 Tricky-Store 模块', '更新 boot hash(必须保证模块自带的密钥认证APP已安装)', '一键重新配置', '安装模块自带的app'].map(text => {\r\n  const button = document.createElement('button');\r\n  button.textContent = text;\r\n  buttonsContainer.appendChild(button);\r\n  return button;\r\n});\r\n// 将按钮容器添加到serverStatusBody\r\nserverStatusBody.appendChild(buttonsContainer);\r\n\r\n// 创建执行按钮\r\nconst hmaButton = document.createElement('button');\r\nhmaButton.textContent = '打开隐藏应用列表菜单';\r\n\r\n// 添加提示\r\nconst buttonDescription = document.createElement('p');\r\nbuttonDescription.classList.add('input-container');\r\nbuttonDescription.textContent = '提示:命令较多时可能会卡住或者日志未输出,这是正常现象';\r\n\r\n// 添加输入框和执行按钮的容器\r\nconst inputContainer = document.createElement('div');\r\ninputContainer.classList.add('input-container');\r\nconst inputDescription = document.createElement('p');\r\ninputDescription.textContent = '自定义shell执行';\r\n// 创建输入框\r\nconst inputBox = document.createElement('input');\r\ninputBox.type = 'text';\r\ninputBox.placeholder = '输入自定义sh命令';\r\n// 创建执行按钮\r\nconst CustomExecuteButton = document.createElement('button');\r\nCustomExecuteButton.textContent = '执行';\r\n// 将所有元素添加到inputContainer中\r\ninputContainer.appendChild(inputBox);\r\ninputContainer.appendChild(CustomExecuteButton);\r\n\r\n// 添加输入框和按钮的容器\r\nconst inputContainer2 = document.createElement('div');\r\ninputContainer2.classList.add('input-container');\r\nconst inputDescription2 = document.createElement('p');\r\ninputDescription2.textContent = '←打开网址';\r\n// 创建输入框\r\nconst inputBox2 = document.createElement('input');\r\ninputBox2.type = 'text';\r\ninputBox2.placeholder = '输入您想要打开的网址';\r\n// 创建按钮\r\nconst CustomExecuteButton2 = document.createElement('button');\r\nCustomExecuteButton2.textContent = '打开';\r\n// 将所有元素添加到inputContainer2中\r\ninputContainer2.appendChild(inputBox2);\r\ninputContainer2.appendChild(CustomExecuteButton2);\r\n\r\n// 将所有元素添加到卡片中\r\nserverStatusBody.appendChild(hmaButton);\r\nserverStatusBody.appendChild(buttonDescription); // 添加描述\r\nserverStatusBody.appendChild(document.createElement('br')); // 添加换行\r\nserverStatusBody.appendChild(inputDescription); // 添加描述\r\nserverStatusBody.appendChild(inputContainer); // 添加输入框和执行按钮的容器\r\nserverStatusBody.appendChild(document.createElement('br')); // 添加换行\r\nserverStatusBody.appendChild(inputContainer2); \r\nserverStatusBody.appendChild(inputDescription2); // 添加换行\r\nserverStatusCard.appendChild(serverStatusHeader);\r\nserverStatusCard.appendChild(serverStatusBody);\r\n\r\n// 创建日志信息卡片（类似地）\r\nconst logCard = document.createElement('div');\r\nlogCard.classList.add('card');\r\n\r\nconst logHeader = document.createElement('div');\r\nlogHeader.classList.add('card-header');\r\nlogHeader.textContent = '日志信息';\r\n\r\nconst logBody = document.createElement('div');\r\n\r\n// 创建日志信息的列表项\r\nconst logEntry = document.createElement('pre');\r\nlogEntry.classList.add('log-body');\r\nlogEntry.textContent = '还没有命令执行呢';\r\n\r\n// 创建一个ul元素并将列表项添加到其中\r\nconst logList = document.createElement('ul');\r\nlogList.appendChild(logEntry);\r\n\r\n// 将所有元素添加到日志卡片中\r\nlogBody.appendChild(logList);\r\nlogCard.appendChild(logHeader);\r\nlogCard.appendChild(logBody);\r\n\r\n// 为按钮添加点击事件监听器\r\nbuttons.forEach((button, index) => {\r\n  button.addEventListener('click', () => {\r\n    // 定义要执行的命令和目录(尽量使用完整路径以减少错误)\r\n    const commands = [\r\n      `sh ${MODDIR}/Tricky_Store/get_config.sh`,\r\n      `rm -f gethash.done;sh ${MODDIR}/getboothash.sh`,\r\n      `sh ${MODDIR}/action.sh`,\r\n      `sh ${MODDIR}/apks/install.sh`\r\n    ];\r\n    // 调用封装好的异步函数执行命令\r\n    PrintExecuteCommandLogToUi(commands[index]);\r\n  });\r\n});\r\n\r\nCustomExecuteButton.addEventListener('click', async () => {\r\n  // 调用封装好的异步函数执行命令\r\n  PrintExecuteCommandLogToUi(inputBox.value);\r\n});\r\nCustomExecuteButton2.addEventListener('click', async () => {\r\n  // 让webui网页调整全屏模式\r\n  fullScreen(false);\r\n  ksu.toast('已打开网页');\r\n  window.location.href = inputBox2.value;\r\n});\r\n\r\n// 为菜单项添加点击事件监听器\r\nhmaButton.addEventListener('click', () => {\r\n  // 创建一个新的div，用于包含新的菜单项\r\n  const HMANewMenuContainer = document.createElement('div');\r\n  HMANewMenuContainer.classList.add('hma-body'); // 添加class\r\n  HMANewMenuContainer.classList.add('card');\r\n  \r\n  // 创建关闭按钮并添加点击事件监听器\r\n  const HMACloseButton = document.createElement('button');\r\n  HMACloseButton.textContent = 'x';\r\n  HMACloseButton.classList.add('close-button');\r\n  HMACloseButton.addEventListener('click', () => {\r\n    // 当关闭按钮被点击时，删除整个菜单\r\n    document.body.removeChild(HMANewMenuContainer);\r\n  });\r\n  \r\n  // 创建菜单头部并添加关闭按钮\r\n  const HMAMenuHeader = document.createElement('div');\r\n  HMAMenuHeader.classList.add('card-header');\r\n  HMAMenuHeader.textContent = '设置隐藏应用列表';\r\n  HMAMenuHeader.appendChild(HMACloseButton); // 将关闭按钮添加到头部\r\n  \r\n  const HMAMenuBody = document.createElement('div');\r\n  HMAMenuBody.classList.add('card-body');\r\n  \r\n  // 创建按钮容器并应用样式\r\n  const HMAButtonsContainer = document.createElement('div');\r\n  HMAButtonsContainer.classList.add('button-container');\r\n  \r\n  // 创建按钮并添加到HMAButtonsContainer\r\n  const HMAButtons = ['配置 隐藏应用列表 APP', '隐藏应用列表切换黑名单模式', '隐藏应用列表切换白名单模式', '关闭隐藏应用列表自动重载', '开启隐藏应用列表自动重载'].map(text => {\r\n    const button = document.createElement('button');\r\n    button.textContent = text;\r\n    HMAButtonsContainer.appendChild(button);\r\n    return button;\r\n  });\r\n  \r\n  // 为按钮添加点击事件监听器\r\n  HMAButtons.forEach((button, index) => {\r\n    button.addEventListener('click', () => {\r\n      // 当按钮被点击时，删除整个菜单\r\n      document.body.removeChild(HMANewMenuContainer);\r\n      const commands = [\r\n        `sh ${MODDIR}/Hide_My_Applist/get_config.sh`,\r\n        `rm -f ${MODDIR}/Hide_My_Applist/whitelist.mode;sh ${MODDIR}/Hide_My_Applist/get_config.sh`,\r\n        `touch ${MODDIR}/Hide_My_Applist/whitelist.mode;sh ${MODDIR}/Hide_My_Applist/get_config.sh`,\r\n        `rm -f ${MODDIR}/Hide_My_Applist/reload`,\r\n        `touch ${MODDIR}/Hide_My_Applist/reload`,\r\n        ];\r\n      // 调用封装好的异步函数执行命令\r\n      PrintExecuteCommandLogToUi(commands[index]);\r\n    });\r\n  });\r\n\r\n  // 获取信息\r\n  const HMAPackageName = `sed -n 's/^HMAPackageName=//p' \"${MODDIR}/webroot/webUiConfig.prop\"`;\r\n  const ProfileName = `sed -n 's/^ProfileName=//p' \"${MODDIR}/webroot/webUiConfig.prop\"`;\r\n  const GetExcludeList = `sed -n 's/^GetExcludeList=//p' \"${MODDIR}/webroot/webUiConfig.prop\"`;\r\n  \r\n  const HMAInputDescription = document.createElement('p');\r\n  HMAInputDescription.classList.add('description-up');\r\n  HMAInputDescription.textContent = '自定义导入配置';\r\n\r\n  // 定义一个函数来创建输入框和执行按钮容器\r\n  function createInputContainer(descriptionText, inputDescriptionText, configKey) {\r\n    const container = document.createElement('div');\r\n    container.classList.add('input-container');\r\n\r\n    const description = document.createElement('p');\r\n    description.classList.add('description-up');\r\n    description.textContent = descriptionText;\r\n\r\n    const inputBox = document.createElement('input');\r\n    inputBox.id = `${configKey}Input`\r\n    inputBox.type = 'text';\r\n    inputBox.placeholder = `在这里输入自定义${inputDescriptionText}`;\r\n\r\n    const executeButton = document.createElement('button');\r\n    executeButton.textContent = '保存';\r\n\r\n    executeButton.addEventListener('click', async () => {\r\n      const command = `sed -i 's/^${configKey}=.*/${configKey}=${inputBox.value}/' \"${MODDIR}/webroot/webUiConfig.prop\" && echo \"已写入\"`;\r\n      PrintExecuteCommandLogToUi(command);\r\n    });\r\n\r\n    container.appendChild(inputBox);\r\n    container.appendChild(executeButton);\r\n    container.appendChild(description);\r\n    return container;\r\n  }\r\n\r\n  // 添加输入框和执行按钮的容器\r\n  const HMAInputContainer1 = createInputContainer('↑输入正确的app包名,默认为 fuck.app.check', 'app包名', 'HMAPackageName');\r\n  const HMAInputContainer2 = createInputContainer('↑输入正确的隐藏应用列表模板名字,默认为 不可见名单', '模板配置名', 'ProfileName');\r\n  const HMAInputContainer3 = createInputContainer('↑输入正确的类型(输入 true 开启,输入 false 关闭),默认为 true', '是否开启排除名单生成', 'GetExcludeList');\r\n\r\n  // 定义一个异步函数\r\n  setTimeout(async () => {\r\n    try {\r\n      // 获取内容\r\n      const HMAPackageName1 = await executeCommand(HMAPackageName);\r\n      // 设置元素的文本内容\r\n      document.getElementById('HMAPackageNameInput').value = `${HMAPackageName1}`;\r\n\r\n      // 获取内容\r\n      const ProfileName1 = await executeCommand(ProfileName);\r\n      // 设置元素的文本内容\r\n      document.getElementById('ProfileNameInput').value = `${ProfileName1}`;\r\n\r\n      // 获取内容\r\n      const GetExcludeList1 = await executeCommand(GetExcludeList);\r\n      // 设置元素的文本内容\r\n      document.getElementById('GetExcludeListInput').value = `${GetExcludeList1}`;\r\n\r\n    } catch (error) {\r\n      console.error('执行命令时发生错误:', error);\r\n    }\r\n  }, 100); // 延迟毫秒\r\n  // 创建导入按钮\r\n  const inputConfig = document.createElement('button');\r\n  inputConfig.textContent = '一键导入并生成配置';\r\n  inputConfig.addEventListener('click', () => {\r\n    // 当按钮被点击时，删除整个菜单\r\n    document.body.removeChild(HMANewMenuContainer);\r\n    // 定义要执行的命令和目录\r\n    const command = `\"${MODDIR}/Hide_My_Applist/0unpack_config.sh\" \"/data/user/0/$(${HMAPackageName})/files/config.json\" \"$(${ProfileName})\" \"$(${GetExcludeList})\";`;\r\n    // 调用封装好的异步函数执行命令\r\n    PrintExecuteCommandLogToUi(command);\r\n  });\r\n\r\n  HMANewMenuContainer.appendChild(HMAMenuHeader); // 添加头部到菜单容器\r\n  HMANewMenuContainer.appendChild(HMAButtonsContainer); // 添加按钮容器到菜单容器\r\n  HMANewMenuContainer.appendChild(HMAInputDescription);\r\n  HMANewMenuContainer.appendChild(HMAInputContainer1); // 添加HMAInputContainer1到菜单容器\r\n  HMANewMenuContainer.appendChild(HMAInputContainer2); // 添加HMAInputContainer2到菜单容器\r\n  HMANewMenuContainer.appendChild(HMAInputContainer3); // 添加HMAInputContainer3到菜单容器\r\n  HMANewMenuContainer.appendChild(inputConfig);\r\n\r\n  // 将菜单项添加到页面中\r\n  document.body.insertBefore(HMANewMenuContainer, appContainer);\r\n});\r\n\r\n// 最后，将卡片和标题添加到#app容器中\r\nappContainer.appendChild(serverStatusCard);\r\nappContainer.appendChild(logCard);\r\n\r\n// 创建一个新的 div 元素用于制作者提醒\r\nconst footer = document.createElement('div');\r\nfooter.id = 'footer';\r\n// 设置制作者提醒的内容\r\nfooter.textContent = 'Designed by linying';\r\n// 将制作者提醒添加到页面的 body 中\r\ndocument.body.appendChild(footer);","let callbackCounter = 0;\nfunction getUniqueCallbackName(prefix) {\n  return `${prefix}_callback_${Date.now()}_${callbackCounter++}`;\n}\n\nexport function exec(command, options) {\n  if (typeof options === \"undefined\") {\n    options = {};\n  }\n\n  return new Promise((resolve, reject) => {\n    // Generate a unique callback function name\n    const callbackFuncName = getUniqueCallbackName(\"exec\");\n\n    // Define the success callback function\n    window[callbackFuncName] = (errno, stdout, stderr) => {\n      resolve({ errno, stdout, stderr });\n      cleanup(callbackFuncName);\n    };\n\n    function cleanup(successName) {\n      delete window[successName];\n    }\n\n    try {\n      ksu.exec(command, JSON.stringify(options), callbackFuncName);\n    } catch (error) {\n      reject(error);\n      cleanup(callbackFuncName);\n    }\n  });\n}\n\nfunction Stdio() {\n    this.listeners = {};\n  }\n  \n  Stdio.prototype.on = function (event, listener) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(listener);\n  };\n  \n  Stdio.prototype.emit = function (event, ...args) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach((listener) => listener(...args));\n    }\n  };\n  \n  function ChildProcess() {\n    this.listeners = {};\n    this.stdin = new Stdio();\n    this.stdout = new Stdio();\n    this.stderr = new Stdio();\n  }\n  \n  ChildProcess.prototype.on = function (event, listener) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(listener);\n  };\n  \n  ChildProcess.prototype.emit = function (event, ...args) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach((listener) => listener(...args));\n    }\n  };\n  \n  export function spawn(command, args, options) {\n    if (typeof args === \"undefined\") {\n      args = [];\n    } else if (typeof args === \"object\") {\n        // allow for (command, options) signature\n        options = args;\n    }\n    \n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n  \n    const child = new ChildProcess();\n    const childCallbackName = getUniqueCallbackName(\"spawn\");\n    window[childCallbackName] = child;\n  \n    function cleanup(name) {\n      delete window[name];\n    }\n\n    child.on(\"exit\", code => {\n        cleanup(childCallbackName);\n    });\n\n    try {\n      ksu.spawn(\n        command,\n        JSON.stringify(args),\n        JSON.stringify(options),\n        childCallbackName\n      );\n    } catch (error) {\n      child.emit(\"error\", error);\n      cleanup(childCallbackName);\n    }\n    return child;\n  }\n\nexport function fullScreen(isFullScreen) {\n  ksu.fullScreen(isFullScreen);\n}\n\nexport function toast(message) {\n  ksu.toast(message);\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$5tSLu","console","log","toast","fullScreen","appContainer","document","getElementById","error","MODDIR","executeCommand","command","verbose","cwd","noBusybox","cmdToExecute","errno","stdout","stderr","exec","message","titleContainer","createElement","classList","add","title","textContent","title_clickCount","addEventListener","ksu","window","location","href","versiontitle","versiontitle_clickCount","PrintExecuteCommandLogToUi","logEntry","setTimeout","result","logBody","scrollTop","scrollHeight","appendChild","version","versionCode","serverStatusCard","serverStatusHeader","serverStatusBody","buttonsContainer","buttons","map","text","button","hmaButton","buttonDescription","inputContainer","inputDescription","inputBox","type","placeholder","CustomExecuteButton","inputContainer2","inputDescription2","inputBox2","CustomExecuteButton2","logCard","logHeader","logList","forEach","index","commands","value","HMANewMenuContainer","HMACloseButton","body","removeChild","HMAMenuHeader","HMAMenuBody","HMAButtonsContainer","HMAButtons","HMAPackageName","ProfileName","GetExcludeList","HMAInputDescription","createInputContainer","descriptionText","inputDescriptionText","configKey","container","description","executeButton","HMAInputContainer1","HMAInputContainer2","HMAInputContainer3","HMAPackageName1","ProfileName1","GetExcludeList1","inputConfig","insertBefore","footer","$3fda245dd9a38f2c$export$78e3044358792147","$3fda245dd9a38f2c$export$708e76f13b8a286c","$3fda245dd9a38f2c$export$b410431fab84fa58","$3fda245dd9a38f2c$var$callbackCounter","options","Promise","resolve","reject","callbackFuncName","Date","now","cleanup","successName","JSON","stringify","$3fda245dd9a38f2c$var$Stdio","listeners","$3fda245dd9a38f2c$var$ChildProcess","stdin","isFullScreen","prototype","on","event","listener","push","emit","args"],"version":3,"file":"index.d2148824.js.map"}